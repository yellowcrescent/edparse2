#!/usr/bin/env python
# coding=utf-8
###############################################################################
#
# edparse2
# Hotarun Project: Unified parser & analysis multitool
#
# @author   J. Hipps <jacob@ycnrg.org>
# @repo     https://bitbucket.org/yellowcrescent/edparse2
# @license  MPLv2 <https://www.mozilla.org/en-US/MPL/2.0/>
#
# Copyright (c) 2013-2016 J. Hipps / Neo-Retro Group, Inc.
#
# https://ycnrg.org/
# https://hotarun.co/
#
###############################################################################

import sys
import signal
import optparse

from ed2.common.logthis import *
from ed2.common.util import *
from ed2.common import rcfile

class xsetup:
    """Contains version information and globals"""
    ## Version info
    version = "0.10.0"
    vdate   = "20 Mar 2016"

    gitinfo = {}
    config = None
    lconfig = None
    defaults = {
                    'run': {
                        'quiet': False
                    },
                    'core': {
                        'loglevel': LL.INFO,
                        'logfile': "edparse.log"
                    },
                    'redis': {
                        'host': "localhost",
                        'port': 6379,
                        'db': 3,
                        'prefix': "edparse"
                    },
                    'mongo': {
                        'host': "localhost",
                        'port': 27017,
                        'database': "ycplay"
                    },
                    'neo4j': {
                        'url': "http://localhost:7474/db/data/"
                    }
               }


def show_banner():
    print ""
    print C.CYN, "*** ", C.WHT, "edparse2", C.OFF
    print C.CYN, "*** ", C.CYN, "Version " + xsetup.version + " (" + xsetup.vdate + ")", C.OFF
    print C.CYN, "*** ", C.GRN, "Copyright (c) 2013-2016 J. Hipps / Neo-Retro Group, Inc.", C.OFF
    print C.CYN, "*** ", C.GRN, "J. Hipps <jacob@ycnrg.org>", C.OFF
    print C.CYN, "*** ", C.YEL, "https://ycnrg.org/", C.OFF
    print C.CYN, "*** ", C.YEL, "https://hotarun.co/", C.OFF
    print ""


def parse_cli():
    """
    Parse command-line options
    """
    global oparser
    oparser = optparse.OptionParser(usage="%prog [options]",version=xsetup.version+" ("+xsetup.vdate+")")

    # General options
    oparser.add_option('-v', '--verbose', action="count", dest="run.verbose", help="Increase logging verbosity (-v Verbose, -vv Debug, -vvv Debug2)")
    oparser.add_option('-L','--loglevel', action="store", dest="core.loglevel", default=False,metavar="NUM", help="Logging output verbosity (4=error,5=warning,6=info,7=verbose,8=debug,9=debug2)")
    oparser.add_option('-q', action="store_true", dest="run.quiet", default=False, help="Quiet - suppress log messages (use as first option)")

    #oparser.add_option('-j','--json', action="store_true", dest="run.json", default=False, help="Output data as JSON")

    options, args = oparser.parse_args(sys.argv[1:])
    vout = vars(options)

    if vout['run.verbose']:
        vout['run.verbose'] += 6
        vout['core.loglevel'] = vout['run.verbose']
    if vout['run.verbose'] or vout['core.loglevel']:
        loglevel(int(vout['core.loglevel']))
    if vout['run.quiet']:
        vout['core.loglevel'] = LL.ERROR
        loglevel(vout['core.loglevel'])

    return vout


##############################################################################
## Entry point
##

if __name__ == '__main__':

    # Show banner
    if len(sys.argv) < 2 or sys.argv[1] != '--version' and not (len(sys.argv[1]) > 1 and sys.argv[1][1] == 'q'):
        show_banner()

    # Check git info
    xsetup.gitinfo = git_info()

    # Set default loglevel
    loglevel(xsetup.defaults['core']['loglevel'])

    # parse CLI options and load running config
    xopt = parse_cli()
    rcfile.loadConfig(cliopts=xopt)
    loglevel(xsetup.config['core']['loglevel'])
    openlog(xsetup.config['core']['logfile'])

    # Set quiet exception handler for non-verbose operation
    if xsetup.config['core']['loglevel'] < LL.VERBOSE:
        sys.excepthook = exceptionHandler

